Goals for the HTML parser:
==========================

1) Reentrant
As soon as any HTML string data is available, WebCleaner tries to feed it
to the HTML parser. This means that the parser has to scan possible
incomplete data, recognizing as much as it can. Incomplete trailing
data is saved for subsequent calls (or it is just flushed away with the
flush() function).
A reset() brings the parser back to its initial state, throwing away all
buffered data.

2) Coping with HTML syntax errors
Lets first see what other error-recovering parsers do:
a) Mozilla
   The parser generates "sinks" for header, body and inside parts of
   an HTML document. At any time a tag can fall into one of these sinks.
b) libxml's HTML parser
   Random tags are inserted to be standard compliant (eg. if you have
   <p> at the beginning, <html><body> is inserted before that).
c) Self-generated bison parsers
   They allow to skip invalid tokens.
All solutions are not acceptable for WebCleaner: a) and b) change
information which may not be available any more (until we buffer all
HTML data until EOF); c) looses information. So the solution is
d) The parser recognizes as much as it can and passes the rest
   of the data as TEXT tokens.

3) Speed
Parsing has to be fast.


Solutions:
==========

1) I use a beta FLEX snapshot from ftp://ftp.uncg.edu/people/wlestes/ to
have a reentrant scanner. It works together with a pure (reentrant)
bison parser.

2) The scanner only passes complete recognized HTML syntax elements to
the parser. Invalid syntax elements are passed as TEXT. This way we do
not need the bison error recovery.
Incomplete data is rescanned the next time the parser calls yylex() or
flush()ed.

The following syntax errors will be recognized correctly:
a) missing quotes around attribute values
b) "</...>" end tags in script modus
c) missing ">" in tags
d) invalid tag names
e) invalid characters inside tags or tag attributes

Additionally the WebCleaner parser has the following features:
a) NULL bytes are changed into spaces
b) <!-- ... --> inside a <script> or <style> are not treated as
   comments, so you can safely turn on the comment delete rule


3) The FLEX code has options to generate a large but fast scanner.
The parser ignores forbidden or unnecessary HTML end tags.
The parser converts tag and attribute names to lower case for easier
matching.
The parser quotes all attribute values with minimal necessity (this is
not standard compliant, but who cares when the browsers understand it).

