test_parser
============ syntax tests =============
HTML '<a b="c">'
startElement ('a', {'b': 'c'})
HTML "<a b='c'>"
startElement ('a', {'b': 'c'})
HTML '<a b=c">'
startElement ('a', {'b': 'c"'})
HTML '<a b="c>'
characters ('<a b="c>',)
HTML '<a b="">'
startElement ('a', {'b': ''})
HTML "<a b=''>"
startElement ('a', {'b': ''})
HTML '<a b=>'
startElement ('a', {'b': ''})
HTML '<a =c>'
startElement ('a', {'c': None})
HTML '<a =>'
startElement ('a', {})
HTML '<a b= "c">'
startElement ('a', {'b': 'c'})
HTML '<a b ="c">'
startElement ('a', {'b': 'c'})
HTML '<a b = "c">'
startElement ('a', {'b': 'c'})
HTML '<a >'
startElement ('a', {})
HTML '< a>'
startElement ('a', {})
HTML '< a >'
startElement ('a', {})
HTML '<>'
characters ('<>',)
HTML '< >'
characters ('< ',)
characters ('>',)
HTML '<a b=c"><a b="c">'
startElement ('a', {'b': 'c"'})
startElement ('a', {'b': 'c'})
HTML '<a b="c><a b="c">'
startElement ('a', {'b': '"c><a b="', 'c': None})
HTML '<!---->'
comment ('',)
HTML '<!----->'
characters ('<!----->',)
HTML '<!------>'
characters ('<!------>',)
HTML '<!------->'
characters ('<!------->',)
HTML '<!---- >'
characters ('<!---- >',)
HTML '<!-- -->'
comment (' ',)
HTML '<!-- -- >'
characters ('<!-- -- >',)
HTML '<!---- />-->'
characters ('<!---- />-->',)
HTML '</a>'
endElement ('a',)
HTML '</ a>'
endElement ('a',)
HTML '</ a >'
endElement ('a',)
HTML '</a >'
endElement ('a',)
HTML '< / a>'
endElement ('a',)
HTML '< /a>'
endElement ('a',)
HTML '<a/>'
startElement ('a', {})
endElement ('a',)
HTML '<!DOCTYPE adrbook SYSTEM "adrbook.dtd">'
doctype (' adrbook SYSTEM "adrbook.dtd"',)
HTML '<?xml version="1.0" encoding="latin1"?>'
pi ('xml version="1.0" encoding="latin1"',)
HTML '<script >\n</script>'
startElement ('script', {})
characters ('\n',)
endElement ('script',)
HTML '<sCrIpt lang="a">bla </a> fasel</scripT>'
startElement ('script', {'lang': 'a'})
characters ('bla </a> fasel',)
endElement ('script',)
HTML '<img bo\\\nrder=0 >'
startElement ('img', {'bo': None, 'rder': '0'})
======== sequential feed tests =========
HTML '<a b="c">'
startElement ('a', {'b': 'c'})
HTML "<a b='c'>"
startElement ('a', {'b': 'c'})
HTML '<a b=c">'
startElement ('a', {'b': 'c"'})
HTML '<a b="c>'
characters ('<a b="c>',)
HTML '<a b="">'
startElement ('a', {'b': ''})
HTML "<a b=''>"
startElement ('a', {'b': ''})
HTML '<a b=>'
startElement ('a', {'b': ''})
HTML '<a =c>'
startElement ('a', {'c': None})
HTML '<a =>'
startElement ('a', {})
HTML '<a b= "c">'
startElement ('a', {'b': '', 'c': None})
HTML '<a b ="c">'
startElement ('a', {'b': 'c'})
HTML '<a b = "c">'
startElement ('a', {'b': '', 'c': None})
HTML '<a >'
startElement ('a', {})
HTML '< a>'
characters ('< ',)
characters ('a',)
characters ('>',)
HTML '< a >'
characters ('< ',)
characters ('a',)
characters (' ',)
characters ('>',)
HTML '<>'
characters ('<>',)
HTML '< >'
characters ('< ',)
characters ('>',)
HTML '<a b=c"><a b="c">'
startElement ('a', {'b': 'c"'})
startElement ('a', {'b': 'c'})
HTML '<a b="c><a b="c">'
startElement ('a', {'b': '"c><a b="', 'c': None})
HTML '<!---->'
comment ('',)
HTML '<!----->'
characters ('<!----->',)
HTML '<!------>'
characters ('<!------>',)
HTML '<!------->'
characters ('<!------->',)
HTML '<!---- >'
characters ('<!---- >',)
HTML '<!-- -->'
comment (' ',)
HTML '<!-- -- >'
characters ('<!-- -- >',)
HTML '<!---- />-->'
characters ('<!---- />-->',)
HTML '</a>'
endElement ('a',)
HTML '</ a>'
endElement ('a',)
HTML '</ a >'
endElement ('a',)
HTML '</a >'
endElement ('a',)
HTML '< / a>'
characters ('< ',)
characters ('/',)
characters (' ',)
characters ('a',)
characters ('>',)
HTML '< /a>'
characters ('< ',)
characters ('/',)
characters ('a',)
characters ('>',)
HTML '<a/>'
startElement ('a', {})
endElement ('a',)
HTML '<!DOCTYPE adrbook SYSTEM "adrbook.dtd">'
doctype (' adrbook SYSTEM "adrbook.dtd"',)
HTML '<?xml version="1.0" encoding="latin1"?>'
pi ('xml version="1.0" encoding="latin1"',)
HTML '<script >\n</script>'
startElement ('script', {})
characters ('\n',)
endElement ('script',)
HTML '<sCrIpt lang="a">bla </a> fasel</scripT>'
startElement ('script', {'lang': 'a'})
characters ('bla </a> fasel',)
endElement ('script',)
HTML '<img bo\\\nrder=0 >'
startElement ('img', {'bo': None, 'rder': '0'})
===== subsequent interwoven parsing ====
startElement ('html', {})
startElement ('html', {})
============= reset test ===============
characters ('>',)
============ flush tests ===============
FLUSH test <
characters ('<',)
FLUSH test <a
characters ('<a',)
FLUSH test <!a
characters ('<!a',)
FLUSH test <?a
characters ('<?a',)
finished
