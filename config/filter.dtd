<!-- 
 Document Type Definition (DTD) for WWW filters.
 See http://webcleaner.sourceforge.net/filter.html
 
 Changes:

 20030806 Bastian Kleineidam
 * removed lang attribute, it was not used
 20030730 Bastian Kleineidam
 * renamed file attribute to filename
 * changed oid attribute from #IMPLIED to #REQUIRED
 + added sid attribute
 20030705 Bastian Kleineidam
 * renamed replacer to replace
 * added pics element
 20030307 Bastian Kleineidam
 * added javascript filter rule
 23.7.2002 Bastian Kleineidam
 * added allowurls and allowdomains filters
 29.6.2002 Bastian Kleineidam
 * added blockurls and blockdomains filters
 7.6.2002 Bastian Kleineidam
 * added oid
 23.2.2002 Bastian Kleineidam
 * added matchurl and dontmatchurl attributes
 10.8.2001 Bastian Kleineidam
 * added Replacer
 
 WWW filters are configuration files for blocking URLs and rewriting
 HTML and image data and HTTP headers.
 Each file must have exactly one filter element (the "root" element).
 Each filter can have any number of rules (including zero).
 Filter files should have a .zap extension.
 In DATA sections, the following characters must be XML-encoded:
 Character	Code
   <             &lt;
   >             &gt;
   &             &amp;
   "             &quot;
   '             &apos;

-->


<!--                      Filter

   The filter and each rule element has a "disable" attribute. By default
   it is "0" which means the filter resp. the rule is enabled.
   This way configuration tools can display the description "desc" of all
   filters and rules and can enable/disable each of them separately.

   The filter is identified by filename.
-->
<!ELEMENT folder ((rewrite|replacer|block|blockurls|blockdomains|allow|header|image|nocomments)*)>
<!ATTLIST folder
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 disable  CDATA "0"
>



<!--                        Rewriter

   The rewrite tag applies to HTML tags and can replace (or delete if
   the replacement data is empty) arbitrary HTML tag blocks.
   The tag name is a case insensitive string.

   If there is no <replace> tag the complete tag will be removed.
-->
<!ELEMENT rewrite (attr*,enclosed?,replace?)>
<!ATTLIST rewrite
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 disable  CDATA "0"
 matchurl CDATA ""
 dontmatchurl CDATA ""
 tag      CDATA "a"
>



<!--                      Attribute

   We can specify attributes the tag must have.
   The attribute name is a case insensitive string.
   The attribute value is a regular expression.
-->
<!ELEMENT attr (#PCDATA)>
<!ATTLIST attr
 name CDATA "href"
>



<!--                       Enclosed

   Specify a regular expression which matches the enclosed block of a 
   tag.
-->
<!ELEMENT enclosed (#PCDATA)>



<!--                    Replace

   replace part   What it does when replacement is 'foo'
   ==========================================================
   tag            <blink>text</blink>  => footextfoo
   tagname        <blink>text</blink>  => <foo>text</foo>
   enclosed       <blink>text</blink>  => <blink>foo</blink>
   attr           <a href="bla">..</a> => <a foo>..</a>
   attrval        <a href="bla">..</a> => <a href="foo">..</a>
   complete       <a href="bla">..</a> => foo
   
   If you specified zero or more than one attributes to match, 
   'attr' and 'attrvalue' replace the first occuring or matching 
   attribute or nothing.
-->
<!ELEMENT replace (#PCDATA)>
<!ATTLIST replace
 part     (tag|tagname|attr|attrval|enclosed|complete) "complete"
>



<!--                       Blocker

    Here we can specify urls to block. We split urls in 
    scheme://host:port/path;parameters?query#fragment
    and can specify regular expressions to match each fragment.
    The host and scheme regular expressions are case insensitive.

    The element data specifies the URL to show when the block matches.
    Applications should have a default URL.
-->
<!ELEMENT block (#PCDATA)>
<!ATTLIST block
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title      CDATA #REQUIRED
 desc       CDATA #IMPLIED
 scheme     CDATA #IMPLIED
 host       CDATA #IMPLIED
 port       CDATA #IMPLIED
 path       CDATA #IMPLIED
 parameters CDATA #IMPLIED
 query      CDATA #IMPLIED
 fragment   CDATA #IMPLIED
 disable    CDATA "0"
>


<!--                       Block Domains

    The traditional way of a lot of filter proxies is to block a list
    of domains. This filter specifies a filename with one domain per
    line.
    There is a bl2wc.py script to convert SquidGuard blacklists to
    WebCleaner .zap rules.
    The file can be gzip-compressed.
-->
<!ELEMENT blockdomains (#PCDATA)>
<!ATTLIST blockdomains
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 filename CDATA #IMPLIED
>


<!--                       Allow Domains

    Same as block for allowing entire domains.
-->
<!ELEMENT allowdomains (#PCDATA)>
<!ATTLIST allowdomains
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 filename CDATA #IMPLIED
>


<!--                       Block Urls

    SquidGuard as 'urls' files as blacklists specifying both host and
    path information.
    There is a bl2wc.py script to convert SquidGuard blacklists to
    WebCleaner .zap rules.
    The file can be gzip-compressed.
-->
<!ELEMENT blockurls (#PCDATA)>
<!ATTLIST blockurls
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 filename CDATA #IMPLIED
>


<!--                       Allow Urls

    Same as block urls for allowing.
-->
<!ELEMENT allowurls (#PCDATA)>
<!ATTLIST allowurls
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 filename CDATA #IMPLIED
>


<!--                       Allow

    Here we can specify urls to allow if they would be blocked
    otherwise.
-->
<!ELEMENT allow EMPTY>
<!ATTLIST allow
 sid        CDATA #REQUIRED
 oid        CDATA #REQUIRED
 title      CDATA #REQUIRED
 desc       CDATA #IMPLIED
 scheme     CDATA #IMPLIED
 host       CDATA #IMPLIED
 port       CDATA #IMPLIED
 path       CDATA #IMPLIED
 parameters CDATA #IMPLIED
 query      CDATA #IMPLIED
 fragment   CDATA #IMPLIED
 disable    CDATA "0"
>



<!--                       Header
     Modify HTTP headers. If the element value is empty, the header gets
     deleted. If its not empty, the specified header is removed/deleted.
-->
<!ELEMENT header (#PCDATA)>
<!ATTLIST header
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 name     CDATA #REQUIRED
 disable  CDATA "0"
 matchurl CDATA ""
 dontmatchurl CDATA ""
>



<!--                       Image

    Block images with a certain size.
-->
<!ELEMENT image (#PCDATA)>
<!ATTLIST image
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 matchurl CDATA ""
 dontmatchurl CDATA ""
 width    CDATA #REQUIRED
 height   CDATA #REQUIRED
 type     (gif|jpg|png) "gif"
 disable  CDATA "0"
>

<!--                      No comments

    Remove comments from HTML source
-->
<!ELEMENT nocomments EMPTY>
<!ATTLIST nocomments
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 disable  CDATA "0"
 matchurl CDATA ""
 dontmatchurl CDATA ""
>

<!--                      JavaScript

    Execute and filter JavaScript in HTML source
-->
<!ELEMENT javascript EMPTY>
<!ATTLIST javascript
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 disable  CDATA "0"
 matchurl CDATA ""
 dontmatchurl CDATA ""
>

<!--                      Replace

   Replace regular expressions in a data stream
-->
<!ELEMENT replace (#PCDATA)>
<!ATTLIST replace
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 disable  CDATA "0"
 matchurl CDATA ""
 dontmatchurl CDATA ""
 search    CDATA #REQUIRED
>

<!--                        PICS filter

   A rule enabling the PICS system in WebCleaner.
-->
<!ELEMENT pics (url?,service*)>
<!ATTLIST pics
 sid      CDATA #REQUIRED
 oid      CDATA #REQUIRED
 title    CDATA #REQUIRED
 desc     CDATA #IMPLIED
 disable  CDATA "0"
 matchurl CDATA ""
 dontmatchurl CDATA ""
 name     CDATA #REQUIRED
>

<!--                      PICS service

   Each PICS service must specify a name by which it is identified.
-->
<!ELEMENT service (#PCDATA)>
<!ATTLIST service
 name CDATA #REQUIRED
>

<!--                      PICS service category

   a category has an identification label matching the one defined
   in PICS.py, and a rating value as content
-->
<!ELEMENT category (#PCDATA)>

