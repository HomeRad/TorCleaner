- Get the proxy to work with IE: it does not send Accept-Encoding, so
  don't encode the content from proxy to client.

- use email.FeedParser instead of rfc822.Message()

- Python 2.5 features
  - The string and unicode methods startswith() and endswith() now accept
    a tuple of prefixes/suffixes to look for. Implements RFE #1491485.
  - Use Win32 API to implement os.{access,chdir,chmod,mkdir,remove,rename,rmdir,utime}.
    As a result, these functions now raise WindowsError instead of OSError.
  - new builtin function any and all

- generic token split for header values of the form
  val1;param, val2;param2, val3, ...

- Preserve self.attr for HttpClient/HttpServer.py

- The "connect error connection refused" message could be improved.
  Here is what firefox displays:

  Unable to connect
  Firefox can't establish a connection to the server at gentoo-wiki.com.
  * The site could be temporarily unavailable or too busy. Try again in a few
    moments.
  * If you are unable to load any pages, check your computer's network
    connection.
  * If your computer or network is protected by a firewall or proxy, make sure
    that Firefox is permitted to access the Web.

- Think about using python-adns instead of the dnspython stuff.

- web gui authentication improvements:
  see http://www.berenddeboer.net/rest/authentication.html
  This will have to be tested for proxy-authentication.

- Add parent proxy support to SSL gateway.

- test HTTP pipelining (esp. the order of the responses)

- Check the order in which client (or server) headers are mangled,
  especially hop-by-hop header removal. Simplify the header mangling.

- Add more HTTP RFC2616 unit tests.

- Add support for https JS urls background download.

- If an unknown port is forbidden (403 status), add an explaining message.

- HTML parser should recognize a missing ending quote of attribute values.
  Right now the parser parses all subsequent stuff as TEXT.
  A solution:
  If end-of-line is encountered during attribute value scanning, assume
  a missing end quote.
  Now roll back the scanner to the first white-space or '>' character
  after the beginning quote, and assume the missing end quote at this
  position.
  Does catch stuff like <a b="c>, and even <a b="c d="e">. Does not catch
  things like <a b="Mr. Smith href="foo">, but that would be ok for now.
  
- Use HTML parser with Unicode support, ie. rewrite this bugger in Python
  with regexes (slow?).
  
- Mac OS X and BSD support for network interface list:
  from the www.dents.org C source (GPL license):
  /* Loop through all of the interfaces, getting the IP address for each */
  for (i = 0; i < ifc.ifc_len;) {
    ifr = (struct ifreq *)((u_char *) ifc.ifc_req + i);

    /* For some reason BSD has to be difficult */
#ifdef HAVE_SA_LEN
    i += sizeof(ifr->ifr_name) +
      (ifr->ifr_addr.sa_len > sizeof(struct sockaddr)
       ? ifr->ifr_addr.sa_len : sizeof(struct sockaddr));
#else
    i += sizeof(struct ifreq);
#endif

    /* Make sure it's an AF_INET address. This is mostly to cover the BSD's */
    /* which send AF_LINK interface's back as well. */
    if (ifr->ifr_addr.sa_family != AF_INET)
        continue;

- squid uses an external auth configuration, we could use that too

- JavaScript evaluation stops on errors. This is bad since some errors
  (like external frame references) cannot be avoided.
  A workaround would be to generate JS objects that have _all_
  properties by overloading the property getter.

- SSL certificate verification.

- Memory is not freed while operating the proxy.

- Allow filtering/blocking by MIME type.

- bfilter has Flash parse and generation library, I want that too .)

- test NTLM authentication
  Mozilla >= 1.6b can test NTLM server auth, squid can test client auth

- NTLM: restore old method type when method was not GET

- NTLM: reconnect to parent proxy after first 407 error (squid closes
  the connection)

- unicode parsing for flex
  the HTML parser (written with flex) does not support unicode, so
  sometimes you'll see '?' chars in the HTML output.

- IPv6 support (there are some stubs already, but untested, and DNS
  library is missing IPv6 support)
  Big problem: how do we decide when to send out IPv6 DNS queries?

- Streaming clamav scanning, try to detect virii immediately
  Note: clamav does _not_ support streaming, so this is currently not
  possible. We have to wait until all data is received, then scan it,
  and only after that we can be sure the data is virus-clean.

- Remove all comments from JavaScript: use spidermonkey scanner, and
  reconstruct the script with token data.

- If the template system ever gets replaced, have a look at
  http://kid.lesscode.org/

http://laurentszyster.be/blog/dns_client/
